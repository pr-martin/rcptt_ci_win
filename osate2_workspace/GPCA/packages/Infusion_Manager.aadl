-- Copyright (c) 2013 University of Minnesota
-- Author: Anitha Murugesan 
-- Date 7/18/2013
-- The features matches the Infusion Manager behavioral model.
--------------------------------------------------------------------------

package Infusion_Manager
public
  with DATATYPES;
  
  system Infusion_Manager
    features    
      TLM_MODE_IN: in data port DATATYPES::Top_Level_Mode_Outputs.Impl;
      OP_CMD_IN: in data port DATATYPES::Operator_Commands.Impl;      
      PATIENT_IN: in data port DATATYPES::Patient_Inputs.Impl;
      CONFIG_IN: in data port DATATYPES::Config_Outputs.Impl;
      ALARM_IN: in data port DATATYPES::Alarm_Outputs.Impl;
      SYS_STAT_IN: in data port DATATYPES::System_Status_Outputs.Impl;      
      IM_OUT: out data port DATATYPES::Infusion_Manager_Outputs.Impl;          
      
      annex agree {**      	
      	      	
--    -- REQ 1 :  MODES RANGE
		property mode_range = 
			(IM_OUT.Current_System_Mode = 0 and IM_OUT.Commanded_Flow_Rate = 0) or  
					(IM_OUT.Current_System_Mode = 1 and IM_OUT.Commanded_Flow_Rate = 0) or 
					(IM_OUT.Current_System_Mode = 2) or 
					(IM_OUT.Current_System_Mode = 3) or 
					(IM_OUT.Current_System_Mode = 4) or 
					(IM_OUT.Current_System_Mode = 6) or 
					(IM_OUT.Current_System_Mode = 7) or 
					(IM_OUT.Current_System_Mode = 8);
		guarantee "mode_range":   mode_range;

	
	 -- REQ 4 : System_Start transitions OFF to ON.
		-- The requirement allocation is : 
		-- TLM : System_Start to TLM -> System_On.
		-- IM  : System_On -> Current_System_Mode = 1 if it was previously Current_System_Mode = 0
-- 
		eq IM_initial: bool = true -> false;
		
		property initial_system_on_implies_idle = 
			IM_initial and TLM_MODE_IN.System_On => (IM_OUT.Current_System_Mode = 1);
		guarantee "initial_system_on_implies_idle":   initial_system_on_implies_idle; 
		
		property system_on_implies_idle = 
			not(IM_initial) and (pre(IM_OUT.Current_System_Mode) = 0) and (TLM_MODE_IN.System_On) => (IM_OUT.Current_System_Mode = 1 and IM_OUT.Commanded_Flow_Rate = 0);
		guarantee "system_on_implies_idle":   system_on_implies_idle; 

	 -- REQ 5 : System_Stop transitions to OFF.
		-- The requirement allocation is : 
		-- TLM : System_Stop to TLM -> !System_On.
		-- IM  : !System_On -> Current_System_Mode = 0

		property not_system_on_implies_mode_0 = 
			not(TLM_MODE_IN.System_On) => (IM_OUT.Current_System_Mode = 0);
		guarantee "not_system_on_implies_mode_0":   not_system_on_implies_mode_0; 	
		
		-- mode 0 and 1 flow rate 0
		property mode_0_1_implies_flow_rate_0 = 
			not(TLM_MODE_IN.System_On) and (IM_OUT.Current_System_Mode < 2) => (IM_OUT.Commanded_Flow_Rate = 0);
		guarantee "mode_0_1_implies_flow_rate_0":   mode_0_1_implies_flow_rate_0; 	

	   ------->  highest_level_alarm_4_implies_flow_rate_zero <------- 
	
		property alarm_L4_implies_flow_rate_zero = 
			(((TLM_MODE_IN.System_On) and (ALARM_IN.Highest_Level_Alarm = 4)) => (IM_OUT.Commanded_Flow_Rate = 0));

		guarantee "alarm_L4_implies_flow_rate_zero":  alarm_L4_implies_flow_rate_zero;
		
		------>  highest_level_alarm_3_implies_flow_rate_kvo <------- 

		property alarm_L3_implies_flow_rate_kvo = 
			(((TLM_MODE_IN.System_On) and (ALARM_IN.Highest_Level_Alarm = 3)) 
					=> (IM_OUT.Commanded_Flow_Rate = CONFIG_IN.Flow_Rate_KVO));

		guarantee "alarm_L3_implies_flow_rate_kvo":   alarm_L3_implies_flow_rate_kvo;
		
	    ------->  highest_level_alarm_3_implies_flow_rate_kvo <------- 

		property alarm_L2_implies_no_bolus = 
			(((TLM_MODE_IN.System_On) and (ALARM_IN.Highest_Level_Alarm = 2)) 
					=> not(IM_OUT.Current_System_Mode = 3)  or  not(IM_OUT.Current_System_Mode = 4) );

		guarantee "alarm_L2_implies_no_bolus": alarm_L2_implies_no_bolus;
		
		-- Infusion Cancel => Flow_Rate 0
		property infusion_cancel_implies_flow_0 = 
			true -> 
			 (TLM_MODE_IN.System_On and OP_CMD_IN.Infusion_Cancel ) => 
						(IM_OUT.Current_System_Mode = 1);
		guarantee "infusion_cancel_implies_flow_0 ":  infusion_cancel_implies_flow_0;		
		
		-- Infusion Pause => <= Flow_Rate KVO
		property infusion_pause_implies_flow_kvo = 
			true -> 
			 (TLM_MODE_IN.System_On and OP_CMD_IN.Infusion_Inhibit ) => 
						(IM_OUT.Commanded_Flow_Rate <= CONFIG_IN.Flow_Rate_KVO);
		guarantee "infusion_pause_implies_flow_kvo ":  infusion_pause_implies_flow_kvo;
		
				-- after noconfig => model 1
		property no_config_implies_mode_1 = 
			(TLM_MODE_IN.System_On and CONFIG_IN.Configured < 1) => 
					(IM_OUT.Current_System_Mode = 1);
		guarantee "no_config_implies_mode_1":  no_config_implies_mode_1; 
		
		property no_patient_request_imples_no_pbolus =
				(TLM_MODE_IN.System_On and not(pre(IM_OUT.Current_System_Mode = 4)) and not(PATIENT_IN.Patient_Bolus_Request)) => 
					not(IM_OUT.Current_System_Mode = 4);
		guarantee "no_patient_request_imples_no_pbolus":  no_patient_request_imples_no_pbolus;
	

	**};
	
	
      
  end Infusion_Manager;
  
  system implementation Infusion_Manager.Impl
  end Infusion_Manager.Impl;
    
end Infusion_Manager;
