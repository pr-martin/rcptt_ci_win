package Mission_Software
public
  with software_types;
with SMACCM;
  
system software
  features
    mission_out : out event data port software_types::can_data;
    mission_in : in event data port software_types::can_data;
    enc_mavlink_in : in event data port software_types::EncryptMAVLink;
    enc_mavlink_out : out event data port software_types::EncryptMAVLink;
    
  annex agree {**
  		
  	const FSW_MAX_CAN_FREQ : real = 20.0;
  	
  	initially:
  	  not event(mission_out) and
  	  time = 0.0 and
  	  last_mavlink_received_time = 0.0 and
  	  not mavlink_received_in_past;
  		    
  	eq time : real;
  	eq next_time : real;
  	const MAVLINK_TO_CAN_LATENCY_BOUND : real = 150.0;
  	
  	eq last_mavlink_received_time : real =
  	  if event(enc_mavlink_in) then time else prev(last_mavlink_received_time, 0.0);
  	  
  	eq mavlink_received_in_past : bool = 
  	  event(enc_mavlink_in) -> pre(mavlink_received_in_past) or event(enc_mavlink_in);
  	  
  	eq mavlink_received_within_bound : bool =
  	  mavlink_received_in_past and (time - last_mavlink_received_time) < MAVLINK_TO_CAN_LATENCY_BOUND;
  	
  	eq time_of_last_can : real = 
  	  -1.0 * FSW_MAX_CAN_FREQ -> if event(mission_out) then time else pre(time_of_last_can);
  	  
  	guarantee "not frequent can" : true ->
  	 time - pre(time_of_last_can) < FSW_MAX_CAN_FREQ => not event(mission_out); 
  	
  	guarantee "if a message is sent to the flight board then it was received over mavlink" : 
  	  event(mission_out) => mavlink_received_within_bound;
  	
  	guarantee "time positive and increasing" :
  	  	time = 0.0 -> true and time >= 0.0 and (true -> time > pre(time));
  	  	
  	guarantee "next time greater than current" :
  	  next_time > time and (true -> pre(next_time) = time);
  	  
    guarantee "time change bound" : 
      5.0 <= next_time - time and next_time - time < 50.0;
  	   
--  	guarantee "if messasage fails to decrypt then nothing is sent to the mission board" : true;
  	
  **};
    
end software;
 
system implementation software.i
  subcomponents
    decrypt : process decrypt_t;
    receive : process receive_t;
    nav : process nav_t;
    mavlink : process mavlink_t;
    can : process can_a15_t;
    transmit : process transmit_t;
    encrypt : process encrypt_t;
    
  connections
    conn0 : port enc_mavlink_in -> decrypt.enc_mavlink;
    conn1 : port decrypt.mavlink_out -> receive.mavlink_in;
    
    conn2 : port receive.nav_mav -> nav.mavlink_in;
    conn3 : port receive.user_input_mav -> mavlink.mavlink_in;
    
    conn4 : port mavlink.user_input -> can.user_input;
    conn5 : port mavlink.control_law_out -> can.control_law;
    
    conn6 : port nav.waypoints -> can.waypoints;
    
    conn7 : port can.sensor_data -> transmit.sensor_data;
    conn8 : port can.control_data -> transmit.control_data;
    conn9 : port can.motmix_data -> transmit.motmix_data;
    
    conn10 : port transmit.mavlink_out -> encrypt.mavlink;
    conn11 : port encrypt.enc_mavlink -> enc_mavlink_out;
    
    conn12 : port can.mission_out -> mission_out;
    conn13 : port mission_in -> can.mission_in;
    
  properties
    SMACCM::OS => "seL4";
    
  annex agree {**
  		
  	synchrony : latched;
  	
  	const DECRYPT_EXEC_TIME : real = 5.0;
  	const ENCRYPT_EXEC_TIME : real = 5.0;
  	const NAV_EXEC_TIME : real = 5.0;
  	const MAVLINK_EXEC_TIME : real = 5.0;
  	const CAN_EXEC_TIME : real = 5.0;
  	const TRANSMIT_EXEC_TIME : real = 5.0;
  	const RECEIVE_EXEC_TIME : real = 5.0;
  	
  	const DECRYPT_PERIOD : real = 25.0;
  	const CAN_PERIOD : real = 25.0;
  	
  	eq decrypt_clock : bool = decrypt._CLK;
  	eq encrypt_clock : bool = encrypt._CLK;
  	eq nav_clock : bool = nav._CLK;
  	eq mavlink_clock : bool = mavlink._CLK;
  	eq can_clock : bool = can._CLK;
  	eq transmit_clock : bool = transmit._CLK;
  	eq receive_clock : bool = receive._CLK;
  	
  	--assert that no one can preempt monitors
  	assert receive_clock =>
  	  not (rise(encrypt_clock) or rise(nav_clock) or rise(mavlink_clock) or
  	  	   rise(can_clock) or rise(transmit_clock) or rise(decrypt_clock));
  	
  	assert encrypt_clock =>
  	  not (rise(decrypt_clock) or rise(nav_clock) or rise(mavlink_clock) or
  	  	   rise(can_clock) or rise(transmit_clock) or rise(receive_clock));
  	
  	assert nav_clock =>
  	  not (rise(encrypt_clock) or rise(decrypt_clock) or rise(mavlink_clock) or
  	  	   rise(can_clock) or rise(transmit_clock) or rise(receive_clock));
  	
  	assert mavlink_clock =>
  	  not (rise(encrypt_clock) or rise(nav_clock) or rise(decrypt_clock) or
  	  	   rise(can_clock) or rise(transmit_clock) or rise(receive_clock));
  	
  	assert transmit_clock =>
  	  not (rise(encrypt_clock) or rise(nav_clock) or rise(mavlink_clock) or
  	  	   rise(can_clock) or rise(decrypt_clock) or rise(receive_clock));
  	  	   
  	--assert that the can thread cannot preempt the receive thread
  	assert decrypt_clock =>
  	  not rise(can_clock);
  	  	   
  	--assert that a thread only begins computation if it is scheduled or 
  	--event driven to do so
  	assert rise(decrypt_clock) => decrypt_scheduled;
  	assert rise(can_clock) => can_scheduled;
  	assert rise(receive_clock) => event(receive.mavlink_in);
  	assert rise(encrypt_clock) => event(encrypt.mavlink);
  	assert rise(nav_clock) => event(nav.mavlink_in);
  	assert rise(mavlink_clock) => event(mavlink.mavlink_in);
  	assert rise(transmit_clock) => event(transmit.sensor_data) or
                                   event(transmit.control_data) or
                                   event(transmit.motmix_data);
  	
  	--constrain when a clock can start ticking
  	assert if decrypt_scheduled and not monitor_is_running then
  	         decrypt_clock
  	       else if can_scheduled and not monitor_is_running then
  	         can_clock
  	       else if event(receive.mavlink_in) then
  	         receive_clock
  	       else if event(encrypt.mavlink) then
  	         encrypt_clock
  	       else if event(nav.mavlink_in) then 
  	         nav_clock
  	       else if event(mavlink.mavlink_in) then
  	         mavlink_clock
  	       else if event(transmit.sensor_data) or event(transmit.control_data) or event(transmit.motmix_data) then
  	         transmit_clock
  	       else true;
  	
  	--constrain how time progresses
  	assert time = 0.0 -> true;
  	assert time >= 0.0 and (true -> time > pre(time));
  	assert true -> time = pre(next_time);
  	    
  	assert next_time =
  	    AGREE_LIB.min_if(decrypt_clock, decrypt_finishes,
  	    AGREE_LIB.min_if(receive_clock, receive_finishes,
  	    AGREE_LIB.min_if(mavlink_clock, mavlink_finishes,
  	    AGREE_LIB.min_if(nav_clock, nav_finishes,
  	    AGREE_LIB.min_if(can_clock, can_finishes,
  	    AGREE_LIB.min_if(transmit_clock, transmit_finishes,
  	    AGREE_LIB.min_if(encrypt_clock, encrypt_finishes,
  	    AGREE_LIB.min(time_of_next_decrypt, time_of_next_can)))))))); 
  	    
  	    
  	assert true -> pre(decrypt_clock) and decrypt_run_time < DECRYPT_EXEC_TIME => decrypt_clock;
  	assert true -> pre(receive_clock) and receive_run_time < RECEIVE_EXEC_TIME => receive_clock;
  	assert true -> pre(mavlink_clock) and mavlink_run_time < MAVLINK_EXEC_TIME => mavlink_clock;
  	assert true -> pre(nav_clock) and nav_run_time < NAV_EXEC_TIME => nav_clock;
  	assert true -> pre(can_clock) and can_run_time < CAN_EXEC_TIME => can_clock;
  	assert true -> pre(transmit_clock) and transmit_run_time < TRANSMIT_EXEC_TIME => transmit_clock;
  	assert true -> pre(encrypt_clock) and encrypt_run_time < ENCRYPT_EXEC_TIME => encrypt_clock;
  	
  	assert true -> pre(decrypt_clock) and time = decrypt_finishes => not decrypt_clock;
  	assert true -> pre(receive_clock) and time = receive_finishes => not receive_clock;
  	assert true -> pre(mavlink_clock) and time = mavlink_finishes => not mavlink_clock;
  	assert true -> pre(nav_clock) and time = nav_finishes => not nav_clock;
  	assert true -> pre(can_clock) and time = can_finishes => not can_clock;
  	assert true -> pre(transmit_clock) and time = transmit_finishes => not transmit_clock;
  	assert true -> pre(encrypt_clock) and time = encrypt_finishes => not encrypt_clock;
  	
  	    
  	--keep track of how long tasks have been running
  	eq decrypt_run_time : real = 0.0 ->
  	  if pre(decrypt_clock) then
  	    pre(decrypt_run_time) + (time - pre(time))
  	  else
  	    0.0;
  	    
  	eq can_run_time : real = 0.0 ->
  	  if pre(can_clock and not(receive_clock)) then
  	    pre(can_run_time) + time - pre(time)
  	  else 
  	    0.0;
  	    
  	eq receive_run_time : real = 0.0 ->
  	  if pre(receive_clock) then
  	    pre(receive_run_time) + (time - pre(time))
  	  else
  	    0.0;
  	
  	eq encrypt_run_time : real = 0.0 ->
  	  if pre(encrypt_clock) then
  	    pre(encrypt_run_time) + (time - pre(time))
  	  else
  	    0.0;
  	    
  	eq mavlink_run_time : real = 0.0 ->
  	  if pre(mavlink_clock) then
  	    pre(mavlink_run_time) + (time - pre(time))
  	  else
  	    0.0;
  	
  	eq nav_run_time : real = 0.0 ->
  	  if pre(nav_clock) then
  	    pre(nav_run_time) + (time - pre(time))
  	  else
  	    0.0;
  	
  	eq transmit_run_time : real = 0.0 ->
  	  if pre(transmit_clock) then
  	    pre(transmit_run_time) + (time - pre(time))
  	  else
  	    0.0;
  	
  	--keep track of events finishing
  	eq decrypt_finishes : real =
  	  time + DECRYPT_EXEC_TIME - decrypt_run_time;
  	  
  	eq receive_finishes : real =
  	  time + RECEIVE_EXEC_TIME - receive_run_time;
  	
  	eq mavlink_finishes : real =
  	  time + MAVLINK_EXEC_TIME - mavlink_run_time;
  	  
  	eq nav_finishes : real =
  	  time + NAV_EXEC_TIME - nav_run_time;
  	  
  	eq can_finishes : real =
  	  time + CAN_EXEC_TIME - can_run_time;
  	  
  	eq transmit_finishes : real =
  	  time + TRANSMIT_EXEC_TIME - transmit_run_time;
  	  
  	eq encrypt_finishes : real =
  	  time + ENCRYPT_EXEC_TIME - encrypt_run_time;
  	  
  	--keep track of when things are scheduled
  	eq time_of_next_decrypt : real = DECRYPT_PERIOD ->
  	  if time < pre(time_of_next_decrypt) then
  	    pre(time_of_next_decrypt)
  	  else
  	    pre(time_of_next_decrypt) + DECRYPT_PERIOD;
  	
  	eq decrypt_scheduled : bool = true ->
  	  if time = pre(time_of_next_decrypt) then
  	    true
  	  else if pre(decrypt_clock) then
  	    false
  	  else
  	    pre(decrypt_scheduled);
  	    
  	eq time_of_next_can : real = CAN_PERIOD ->
  	  if time < pre(time_of_next_can) then
  	    pre(time_of_next_can)
  	  else
  	    pre(time_of_next_can) + CAN_PERIOD;
  	
  	eq can_scheduled : bool = true ->
  	  if time = pre(time_of_next_can) then
  	    true
  	  else if pre(can_clock) then
  	    false
  	  else
  	    pre(can_scheduled);
  	    
  	eq monitor_is_running : bool =
  	  receive_clock or encrypt_clock or transmit_clock or nav_clock or mavlink_clock;
  	  	   
  	node rise (clock : bool) returns (ret : bool);
  	let
  	  ret = clock -> not pre(clock) and clock;
  	tel;
  	
  	node fall (clock : bool) returns (ret : bool);
  	let
  	  ret = false -> pre(clock) and not clock;
  	tel;
  	
  	
  	------- begin lemmas -------
  	lemma "positive runtimes" : 
  	  can_run_time >= 0.0 and decrypt_run_time >= 0.0 and receive_run_time >= 0.0 and
  	  mavlink_run_time >= 0.0 and nav_run_time >= 0.0 and transmit_run_time >= 0.0 and encrypt_run_time >= 0.0;
  	
  	
  **};
    
end software.i;

process decrypt_t
  features
    enc_mavlink : in event data port software_types::EncryptMAVLink;
    mavlink_out : out event data port software_types::MAVLink;
    
  properties
    SMACCM::Authenticator => true;
    
    
  annex agree {**
  	
  	eq message_passed_decryption : bool;
  	
  	initially:
  	  not event(mavlink_out);
  	
  	guarantee "if no message is received, then nothing decrypted" : 
      event(mavlink_out) => event(enc_mavlink);  
      
    guarantee "if message does not decrypt, then nothing is sent":
      event(mavlink_out) => message_passed_decryption;
      	
  **};
    
end decrypt_t;

process receive_t
  features
    mavlink_in : in event data port software_types::MAVLink;
    nav_mav : out event data port software_types::MAVLink;
    user_input_mav : out event data port software_types::MAVLink;
    
  properties
    SMACCM::Trusted => true;
    
  annex agree {**
  	  initially:
  	    not (event(nav_mav) or event(user_input_mav));
  	    
  	   guarantee "no output events if no input events" :
  	    event(nav_mav) or event(user_input_mav) => event(mavlink_in);
  **};
    
end receive_t;

process mavlink_t
  features
    mavlink_in : in event data port software_types::MAVLink;
    user_input : out event data port software_types::userinput_result.impl;
    control_law_out : out event data port software_types::control_law.impl;
    
  properties
    SMACCM::Trusted => true;
    
  annex agree {**
  	  initially:
  	    not (event(user_input) or event(control_law_out));
  	    
  	  guarantee "output events only happen if input events happen" :
  	    event(control_law_out) or event(user_input) => event(mavlink_in);
  	    
  **};
end mavlink_t;

process nav_t
  features
    mavlink_in : in event data port software_types::MAVLink;
    waypoints : out event data port software_types::waypoint;
    
  properties
    SMACCM::Trusted => true;
    
  annex agree {**
      initially:
        not event(waypoints);
        
      guarantee "waypoints only sent of they are recieved" :
        event(waypoints) => event(mavlink_in);
  **};
end nav_t;

process can_a15_t
  features
    waypoints : in event data port software_types::waypoint;
    user_input : in event data port software_types::userinput_result.impl;
    control_law  : in event data port software_types::control_law.impl;
    mission_out : out event data port software_types::can_data;
    mission_in : in event data port software_types::can_data;
    mavlink_out : out event data port software_types::MAVLink;
    sensor_data : out event data port software_types::position.impl;
    control_data : out event data port software_types::controloutput.impl;
    motmix_data : out event data port software_types::motors_data;
    
  properties
    SMACCM::Trusted => true;
    
  annex agree{**
  	initially:
  	  not (event(mission_out) or event(mavlink_out) or event(sensor_data) or
  	  	   event(control_data) or event(motmix_data));
  	  	   
  	guarantee "only send data to flight board if userinput is received" :
  	  event(mission_out) => event(waypoints) or event(user_input) or event(control_law);
  	  
  	guarantee "only send data to transmit if flight data received" :
  	  event(mavlink_out) or event(sensor_data) or event(control_data) or event(motmix_data) =>
  	    event(mission_in);
  **};
end can_a15_t;

process transmit_t
  features
    sensor_data : in event data port software_types::position.impl;
    control_data : in event data port software_types::controloutput.impl;
    motmix_data : in event data port software_types::motors_data;
    mavlink_out : out event data port software_types::MAVLink;
    
  properties
    SMACCM::Trusted => true;
    
  annex agree {**
  	initially:
  	  not event(mavlink_out);
  	  
  	guarantee "only send mavlink data out if data received" :
  	  event(mavlink_out) => event(sensor_data) or event(control_data) or event(motmix_data);
  **};
end transmit_t;

process encrypt_t
  features
    enc_mavlink : out event data port software_types::EncryptMAVLink;
    mavlink : in event data port software_types::MAVLink;
    
  properties
    SMACCM::Trusted => true;
    
  annex agree {**
  	initially:
  	  event(enc_mavlink);
  	  
  	guarantee "only send output if input received" :
  	  event(enc_mavlink) => event(mavlink);
  **};
end encrypt_t;

end Mission_Software;